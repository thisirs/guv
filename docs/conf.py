# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import re
import textwrap
import argparse
sys.path.insert(0, os.path.abspath('../src'))

# -- Project information -----------------------------------------------------

project = 'guv'
copyright = '2021, Sylvain Rousseau'
author = 'Sylvain Rousseau'


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx_rtd_theme',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'fr'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']


napoleon_custom_sections = ["Options"]

autodoc_mock_imports = [
    "datetime",
    "doit",
    "icalendar",
    "jinja2",
    "latex",
    "markdown",
    "numpy",
    "openpyxl",
    "pandas",
    "pynliner",
    "PyPDF2",
    "tabula-py",
    "tabula",
    "unidecode",
    "oyaml",
    "aiohttp",
    "browser_cookie3",
    "xlrd",
    "yapf",
    "yaml",
    "bs4"
]


def doc_cli_args(parser):
    docs = []
    for action in parser._actions:
        if action.option_strings:
            arg_name = ", ".join(f"``{a}``" for a in action.option_strings)
            arg_doc = action.help
            docs.append("- " + textwrap.indent(f"{arg_name} : {arg_doc}", "  ")[2:])
        else:
            if action.metavar is not None:
                result = action.metavar
            elif action.choices is not None:
                choice_strs = [str(choice) for choice in action.choices]
                result = '{%s}' % ','.join(choice_strs)
            else:
                result = ""
            arg_name = result
            arg_doc = action.help
            docs.append("- " + textwrap.indent(f"{arg_name} : {arg_doc}", "  ")[2:])

    return """
.. rubric:: Options

{options}
""".format(options="\n".join(docs))


def expand_block(parser, line):
    """Return list of lines after expanding placeholder in line"""

    if "{options}" in line:
        def rep(m):
            indent = m.group(1)
            options = doc_cli_args(parser)
            return textwrap.indent(options, indent)

        return re.sub("( *)(\\{options\\})", rep, line).splitlines()
    else:
        return [line]

def sphinx_add_options(app, what, name, obj, options, lines):
    if what != "class":
        return

    if hasattr(obj, "doc_flag"):
        instance = obj(None, None, None)
        parser = instance.parser
    elif hasattr(obj, "cli_args"):
        parser = argparse.ArgumentParser(prog="guv", description="")
        for arg in obj.cli_args:
            parser.add_argument(*arg.args, **arg.kwargs)
    else:
        return

    # In-place modification
    lines[:] = [ll for l in lines for ll in expand_block(parser, l)]


def setup(app):
    app.connect('autodoc-process-docstring', sphinx_add_options)

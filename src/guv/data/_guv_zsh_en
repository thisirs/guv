#compdef guv

# AUTOMATICALLY GENERATED by `shtab`


_shtab_guv_commands() {
  local _commands=(
    "csv_create_groups:Random creation of student groups"
    "csv_groups:CSV files of groups from \`\`effectif.xlsx\`\` for Moodle"
    "csv_groups_groupings:CSV file of groups and groupings for Moodle import"
    "doit:Allows access to underlying sub-commands"
    "pdf_attendance:PDF file of attendance sheets"
    "pdf_attendance_full:Zip file of personalized attendance sheets by group and semester"
    "send_email:Send an email to each student."
    "xls_grade_book_group:Excel grade file by group"
    "xls_grade_book_jury:Excel file for managing a UV jury"
    "xls_grade_book_no_group:Excel file for individual grading"
    "xls_student_data:"
    "zoom_breakout_rooms:"
  )
  _describe 'guv commands' _commands
}

_shtab_guv_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_guv_csv_create_groups_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-G,--grouping}"[Pre-groups in which to make sub-groups]:grouping:_guv_column"
  {-n,--num-groups}"[Number of groups to create (per sub-groups if specified)]:num_groups:"
  {-s,--group-size}"[Group size\: pairs, trios or more]:group_size:"
  {-p,--proportions}"[List of proportions to create the groups]:proportions:"
  {-t,--template}"[Template to give names to the groups with \`\{title\}\`, \`\{grouping_name\}\` or \`\{group_name\}\`]:_template:"
  {-l,--names}"[List of keywords to build the group names]:names:"
  {-o,--ordered}"[Order the list of students alphabetically or by columns]:ordered:_guv_columns"
  {-g,--global}"[Do not reset the sequence of group names between each grouping]"
  {-r,--random}"[Randomly permute the group names]"
  "--other-groups[List of columns of already formed groups that should not be reformed.]:other_groups:_guv_columns"
  "--affinity-groups[List of columns of affinity groups.]:affinity_groups:_guv_columns"
  "--max-iter[Maximum number of attempts to find groups with constraints (default 1000).]:max_iter:"
  ":Name associated with the set of created groups. Included in the name of the created file and in the name of the created groups following the used \*template\*.:"
)

_shtab_guv_csv_groups_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-g,--groups}"[List of groupings to consider via a column name. By default, the groupings \`\`Lecture\`\`, \`\`Tutorial\`\` and \`\`Practical work\`\` are used.]:groups:_guv_columns"
  {-l,--long}"[Use the names of Lecture\/Tutorial\/Practical work groups in long format, i.e., \"TP1\" and \"TD1\" instead of \"T1\" and \"D1\"]"
  {-s,--single}"[Create a single file]"
)

_shtab_guv_csv_groups_groupings_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "-g[Number of groups in each grouping]:ngroups:"
  "-f[Format of the group name (default\: D\#\#_P1_\@)]:ngroupsf:"
  "-G[Number of different groupings]:ngroupings:"
  "-F[Format of the grouping name (default\: D\#\#_P1)]:ngroupingsf:"
)

_shtab_guv_doit_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "(-)*:args:"
)

_shtab_guv_pdf_attendance_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-t,--title}"[Specifies a title that will be used in the attendance sheets and the name of the generated file. By default, it is \`\`Attendance sheet\`\`.]:title:"
  {-g,--group}"[Allows creating groups to make as many attendance sheets. You must specify a column from the central file \`\`effectif.xlsx\`\`.]:group:_guv_column"
  {-b,--blank}"[Do not display the names of the students (useful only with --group).]"
  {-c,--count}"[Uses a list of staff instead of \`\`--group\`\`. The group names can be specified by \`\`--names\`\`. Otherwise, the group names are in the form \`\`Group 1\`\`, \`\`Group 2\`\`,...]:count:"
  {-n,--names}"[Specifies the names of the groups corresponding to \`\`--count\`\`. The list must be the same size as \`\`--count\`\`.]:names:"
  {-e,--extra}"[Allows adding additional empty lines in addition to those already present induced by \`\`--group\`\` or set by \`\`--count\`\`.]:extra:"
  "--tiers-temps[Specifies the column for students placed in a dedicated room. If the column is not specified, \`\`None\`\`.]:tiers_temps:_guv_column"
  "--save-tex[Allows leaving the generated .tex files for possible modification.]"
)

_shtab_guv_pdf_attendance_full_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--title[Specifies a title that will be used in the attendance sheets and the name of the generated file. By default, it is \`\`Attendance sheet\`\`.]:title:"
  {-g,--group}"[Allows specifying a group column to make attendance sheets by groups.]:group:_guv_column"
  {-n,--slots}"[Allows specifying the number of sessions for the semester, i.e., the number of columns in the attendance sheet.]:slots:"
  {-t,--template}"[Template to set the name of successive sessions in the attendance sheet. By default, it is \`\`S\{number\}\`\`. The only supported keyword is \`\`number\`\` which starts at 1.]:template:"
  "--save-tex[Allows leaving the generated .tex files for possible modification.]"
)

_shtab_guv_send_email_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  ":The path to a Jinja2 template:"
)

_shtab_guv_xls_grade_book_group_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--name[Name of the grade sheet]:name:"
  "--marking-scheme[Files containing the detailed grading scales]:config_files:_files"
  {-o,--order-by}"[Column used to order the names in each sheet]:order_by:_guv_column"
  {-w,--worksheets}"[Column used to group into multiple sheets]:group_by:_guv_column"
  {-e,--extra-cols}"[Additional columns to include in the grade sheet]:extra_cols:_guv_columns"
  {-g,--group-by}"[Group column used to grade groups of students]:subgroup_by:_guv_column"
)

_shtab_guv_xls_grade_book_jury_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--name[Name of the grade sheet]:name:"
  "--config[Configuration file specifying the grades to use]:config_file:_files"
)

_shtab_guv_xls_grade_book_no_group_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--name[Name of the grade sheet]:name:"
  "--marking-scheme[Files containing the detailed grading scales]:config_files:_files"
  {-o,--order-by}"[Column used to order the names in each sheet]:order_by:_guv_column"
  {-w,--worksheets}"[Column used to group into multiple sheets]:group_by:_guv_column"
  {-e,--extra-cols}"[Additional columns to include in the grade sheet]:extra_cols:_guv_columns"
)

_shtab_guv_xls_student_data_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_guv_zoom_breakout_rooms_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  ":The name of the group column:"
)


_shtab_guv() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_guv_options[(I)${(q)one_or_more}*]} + ${_shtab_guv_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_guv_options+=(': :_shtab_guv_commands' '*::: :->guv')
  fi
  _arguments -C -s $_shtab_guv_options

  case $state in
    guv)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_guv-$line[1]:"
      case $line[1] in
        csv_create_groups) _arguments -C -s $_shtab_guv_csv_create_groups_options ;;
        csv_groups) _arguments -C -s $_shtab_guv_csv_groups_options ;;
        csv_groups_groupings) _arguments -C -s $_shtab_guv_csv_groups_groupings_options ;;
        doit) _arguments -C -s $_shtab_guv_doit_options ;;
        pdf_attendance) _arguments -C -s $_shtab_guv_pdf_attendance_options ;;
        pdf_attendance_full) _arguments -C -s $_shtab_guv_pdf_attendance_full_options ;;
        send_email) _arguments -C -s $_shtab_guv_send_email_options ;;
        xls_grade_book_group) _arguments -C -s $_shtab_guv_xls_grade_book_group_options ;;
        xls_grade_book_jury) _arguments -C -s $_shtab_guv_xls_grade_book_jury_options ;;
        xls_grade_book_no_group) _arguments -C -s $_shtab_guv_xls_grade_book_no_group_options ;;
        xls_student_data) _arguments -C -s $_shtab_guv_xls_student_data_options ;;
        zoom_breakout_rooms) _arguments -C -s $_shtab_guv_zoom_breakout_rooms_options ;;
      esac
  esac
}

# Custom Preamble

_guv_column() {
    if test -e $(pwd)/generated/.columns.list; then
        local columns=("${(@f)$(cat $(pwd)/generated/.columns.list)}")
        _describe 'columns' columns
    fi
}

_guv_columns() {
    if test -e $(pwd)/generated/.columns.list; then
        local -a columns=("${(@f)$(cat $(pwd)/generated/.columns.list)}")
    fi

    _values -s , columns $columns
}

# End Custom Preamble


typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_guv -N guv
else
  # autoload from fpath, call function directly
  _shtab_guv "$@"
fi

